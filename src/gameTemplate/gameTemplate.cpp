#include "vcsLib.h"
#include "gameTemplate.h"

const unsigned char positionLookup[] =
{
	0x30, 0x20, 0x10, 0x00, 0xf0, 0xe0, 0xd0, 0xc0, 0xb0, 0xa0, 0x90,
	0x71, 0x61, 0x51, 0x41, 0x31, 0x21, 0x11, 0x01, 0xf1, 0xe1, 0xd1, 0xc1, 0xb1, 0xa1, 0x91,
	0x72, 0x62, 0x52, 0x42, 0x32, 0x22, 0x12, 0x02, 0xf2, 0xe2, 0xd2, 0xc2, 0xb2, 0xa2, 0x92,
	0x73, 0x63, 0x53, 0x43, 0x33, 0x23, 0x13, 0x03, 0xf3, 0xe3, 0xd3, 0xc3, 0xb3, 0xa3, 0x93,
	0x74, 0x64, 0x54, 0x44, 0x34, 0x24, 0x14, 0x04, 0xf4, 0xe4, 0xd4, 0xc4, 0xb4, 0xa4, 0x94,
	0x75, 0x65, 0x55, 0x45, 0x35, 0x25, 0x15, 0x05, 0xf5, 0xe5, 0xd5, 0xc5, 0xb5, 0xa5, 0x95,
	0x76, 0x66, 0x56, 0x46, 0x36, 0x26, 0x16, 0x06, 0xf6, 0xe6, 0xd6, 0xc6, 0xb6, 0xa6, 0x96,
	0x77, 0x67, 0x57, 0x47, 0x37, 0x27, 0x17, 0x07, 0xf7, 0xe7, 0xd7, 0xc7, 0xb7, 0xa7, 0x97,
	0x78, 0x68, 0x58, 0x48, 0x38, 0x28, 0x18, 0x08, 0xf8, 0xe8, 0xd8, 0xc8, 0xb8, 0xa8, 0x98,
	0x79, 0x69, 0x59, 0x49, 0x39, 0x29, 0x19, 0x09, 0xf9, 0xe9, 0xd9, 0xc9, 0xb9, 0xa9, 0x99,
	0xea, 0xda, 0xca,
	0x7b, 0x6b, 0x5b, 0x4b, 0x3b, 0x2b, 0x1b, 0x0b, 0xfb, 0xeb, 0xdb
};

void strobePosition(unsigned char strobeAddress, int position);

// SKULL sprite provided by http://atariage.com/forums/topic/169238-free-sprites-for-the-taking/page-1
const unsigned char sprite[16] = { 0x3e, 0x7f, 0xbb, 0x93, 0x6e, 0x1c, 0x04, 0x1c, 0,0,0,0,0,0,0,0 };

void gameMain()
{
	int p0x = 80;

	while (1)
	{
		vcsLda2(2);
		vcsSta3(WSYNC);
		vcsSta3(VSYNC); // Start V Sync
		vcsSta3(WSYNC);
		vcsSta3(WSYNC);
		vcsLda2(0);
		vcsSta3(WSYNC);
		vcsSta3(VSYNC); // Stop V Sync
		vcsJmp3(); // Make sure the PC has enough room for the following NOPs
		vcsNop2n(33 * 38);

		// TODO VBLANK processing here

		vcsSta3(WSYNC);
		vcsWrite5(CTRLPF, 0);
		vcsWrite5(NUSIZ0, 0);
		vcsWrite5(NUSIZ1, 0);

		// Position objects
		vcsSta3(WSYNC);
		strobePosition(RESM0, 20);
		strobePosition(RESM1, 40);
		strobePosition(RESBL, 60);
		strobePosition(RESP0, p0x);
		strobePosition(RESPone, 100);
		vcsSta3(HMOVE);
		vcsSta3(WSYNC);

		vcsWrite5(COLUP0, 0);
		vcsWrite5(COLUP1, 0x80);
		vcsWrite5(ENAM0, 2);
		vcsWrite5(ENAM1, 2);
		vcsWrite5(ENABL, 2);

		// Draw frame
		vcsSta3(WSYNC);
		vcsWrite5(VBLANK, 0);
		for (int i = 0; i < 192; i++)
		{
			vcsSta3(WSYNC);
			vcsWrite5(COLUBK, i | 0x0f);
			vcsWrite5(COLUPF, i);
			vcsWrite5(GRP0, sprite[i & 0xf]);
			vcsWrite5(GRP1, sprite[(i+4) & 0xf]);
			vcsJmp3();
		}

		vcsLda2(2);
		vcsSta3(VBLANK);
		unsigned char joystick = vcsRead4(SWCHA);
		unsigned char button = vcsRead4(INPT4);
		vcsJmp3(); // Make sure the PC has enough room for the following NOPs
		vcsNop2n(30 * 38);
		// TODO OVERSCAN processing here
		if((joystick & 0x80) == 0)
		{
			p0x++;
			if(p0x > 159)
			{
				p0x -= 160;
			}
		}
		if((joystick & 0x40) == 0)
		{
			p0x--;
			if(p0x < 0)
			{
				p0x += 160;
			}
		}
	}

}


void strobePosition(unsigned char strobeAddress, int position)
{
	vcsNop2();
	while (position < 0)
	{
		position += 160;
	}
	vcsNop2();
	while (position > 159)
	{
		position -= 160;
	}
	for (int i = 0; i < 5; i++)
	{
		vcsJmp3();
	}
	int strobeOffset = (positionLookup[position] & 0x0f);
	for (int i = 0; i < 9; i++)
	{
		if (i == strobeOffset)
		{
			vcsSta3(strobeAddress);
		}
		vcsWrite5(strobeAddress + 0x10, positionLookup[position]);
	}
	if (strobeOffset == 9)
	{
		vcsSta3(strobeAddress);
	}
	vcsNop2();

	if (strobeOffset == 10)
	{
		vcsSta3(strobeAddress);
	}
	vcsNop2();
	vcsNop2();

	if (strobeOffset == 11)
	{
		vcsSta3(strobeAddress);
	}
	vcsJmp3();
}
